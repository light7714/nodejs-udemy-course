const { validationResult } = require('express-validator');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

require('dotenv').config();

const User = require('../models/user');

exports.signup = (req, res, next) => {
	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		const error = new Error('Validation Failed');
		error.statusCode = 422;
		error.data = errors.array();
		throw error;
	}

	const email = req.body.email;
	const name = req.body.name;
	const password = req.body.password;
	bcrypt
		.hash(password, 12)
		.then((hashedPassword) => {
			const user = new User({
				email: email,
				password: hashedPassword,
				name: name,
			});
			return user.save();
		})
		.then((result) => {
			//201 as a resource was created
			res.status(201).json({
				message: 'User created',
				userId: result._id,
			});
		})
		.catch((err) => {
			if (!err.statusCode) {
				err.statusCode = 500;
			}
			next(err);
		});
};

exports.login = (req, res, next) => {
	const email = req.body.email;
	const password = req.body.password;
	let loadedUser;

	User.findOne({ email: email })
		.then((user) => {
			if (!user) {
				const error = new Error(
					'A user with this email could not be found!'
				);
				//401 -> not authenticated
				error.statusCode = 401;
				throw error;
			}
			loadedUser = user;
			//user.password is the hashed password
			return bcrypt.compare(password, user.password);
		})
		.then((isEqual) => {
			if (!isEqual) {
				const error = new Error('Wrong password!');
				error.statusCode = 401;
				throw error;
			}

			//*creates a new signature and packs it into a jwt (synchronous), can pass any data inside it. 2nd arg is the secret used for signing. 3rd arg is config
			//not storing password as this jwt will be returned to the frontend.
			//*here token will become invalid after 1 hour (also in react app after 1 hr person will be logged out)
			//*we can see in devtools in application->local storage, the token, userId and expiryDate (expiryDate was generated by frontend code)
			const token = jwt.sign(
				{
					email: loadedUser.email,
					userId: loadedUser._id.toString(),
				},
				process.env.jwt_secret,
				{ expiresIn: '1h' }
			);

			//in frontend we look for the user id and store it.	(whats the use, when token already has userId, and we extract it in is-auth.js ??)
			res.status(200).json({
				token: token,
				userId: loadedUser._id.toString(),
			});
		})
		.catch((err) => {
			if (!err.statusCode) {
				err.statusCode = 500;
			}
			next(err);
		});
};

exports.getUserStatus = (req, res, next) => {
	User.findById(req.userId)
		.then((user) => {
			if (!user) {
				const error = new Error('User not found!');
				error.statusCode = 404;
				throw error;
			}

			res.status(200).json({
				status: user.status,
			});
		})
		.catch((err) => {
			if (!err.statusCode) {
				err.statusCode = 500;
			}
			next(err);
		});
};

exports.updateUserStatus = (req, res, next) => {
	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		const error = new Error('Validation Failed');
		error.statusCode = 422;
		// error.data = errors.array();
		throw error;
	}

	const newStatus = req.body.status;
	User.findById(req.userId)
		.then((user) => {
			if (!user) {
				const error = new Error('User not found!');
				error.statusCode = 404;
				throw error;
			}

			user.status = newStatus;
			return user.save();
		})
		.then((result) => {
			res.status(200).json({
				message: 'Status updated in user',
			});
		})
		.catch((err) => {
			if (!err.statusCode) {
				err.statusCode = 500;
			}
			next(err);
		});
};
